let sectionHeading (heading: Stdlib.Html.Node ) : Stdlib.Html.Node =
    Stdlib.Html.p
        [ ("class", Stdlib.Option.Option.Some("text-4xl font-bold mb-5 mx-2 md:mx-0")) ]
        [ (Stdlib.Html.htmlTagNode "span" [] [ heading ]) ]

let sectionWrapper (children: List<Stdlib.Html.Node>) : Stdlib.Html.Node =
    Stdlib.Html.p
        [ ("class", Stdlib.Option.Option.Some("mx-2 md:container md:mx-auto lg:p-6 mb-24 font-Quicksand")) ]
        children

let gradientText (text: String) : Stdlib.Html.Node =
    Stdlib.Html.span
        [ ("class", Stdlib.Option.Option.Some("text-transparent bg-clip-text bg-gradient-to-r from-purple to-blue")) ]
        [ Stdlib.Html.stringNode text ]

let itemsWrapper (children: List<Stdlib.Html.Node>) : Stdlib.Html.Node =
    Stdlib.Html.div [ ("class", Stdlib.Option.Option.Some("font-Quicksand grid lg:grid-cols-2 gap-3")) ] children

let indentedBody (content: Stdlib.Html.Node) : Stdlib.Html.Node =
    Stdlib.Html.span [ ("class", Stdlib.Option.Option.Some("text-lg font-normal mx-4 my-4")) ] [ content ]

let toggleBody (id: String) (content: Stdlib.Html.Node) : Stdlib.Html.Node =
    Stdlib.Html.span
        [ ("class", Stdlib.Option.Option.Some("hidden mb-2"))
          ("id", Stdlib.Option.Option.Some(id)) ]
        [ content ]

let seeExample () : Stdlib.Html.Node =
    Stdlib.Html.a
        [ ("class", Stdlib.Option.Option.Some("see-example text-blue hover:text-purple cursor-pointer m-3")) ]
        [ Stdlib.Html.stringNode "See example" ]

let readMoreButton (id: String) : Stdlib.Html.Node =
    Stdlib.Html.div 
      [ ("class", Stdlib.Option.Option.Some("relative hiddenToggleItem group block w-fit mt-4 cursor-pointer group"))
        ("data-target", Stdlib.Option.Option.Some(id))
      ]
      [
        Stdlib.Html.div 
          [ ("class", Stdlib.Option.Option.Some("absolute transition-all rounded-md bg-gradient-to-r from-purple to-blue p-0.5 blur-lg group-hover:opacity-75 group-hover:inset-1 group-hover:duration-200"))]
          []
        Stdlib.Html.div 
          [("class", Stdlib.Option.Option.Some("relative inline-flex rounded-md bg-gradient-to-r from-purple to-blue p-0.5"))]
          [
            Stdlib.Html.div
              [("class", Stdlib.Option.Option.Some("bg-light-background rounded back px-3 py-1 flex justify-center items-center"))]
              [
                Stdlib.Html.span 
                  [("class", Stdlib.Option.Option.Some("text-lg text-black flex items-center "))]
                  [
                    Stdlib.Html.span 
                      [ ("class", Stdlib.Option.Option.Some("readMoreButton"))]
                      [ Stdlib.Html.stringNode "Read More"]
                    arrowSvg ()
                    
                  ]
              ]
          ]
      ]
      


let toggleItem (id: String) (content: List<Stdlib.Html.Node>) : Stdlib.Html.Node =
    Stdlib.Html.div
        [ ("class",
           Stdlib.Option.Option.Some(
               "toggleItem sm:h-72 h-64 flex flex-col justify-center mt-4 md:mt-0 bg-white drop-shadow-md p-5 md:px-8 rounded-2xl cursor-pointer hover:-translate-y-1 transition-all duration-300 ease-in-out"
           ))
          ("data-target-id", Stdlib.Option.Option.Some(id)) ]
        [ Stdlib.Html.span [] content
          seeExample ()
          Stdlib.Html.p [ ("class", Stdlib.Option.Option.Some("toggleContent text-purple -ml-3")) ] [] ]


let simpleItem (content: List<Stdlib.Html.Node>) : Stdlib.Html.Node =
    Stdlib.Html.div
        [ ("class",
           Stdlib.Option.Option.Some(
               "h-full mt-4 flex flex-col justify-center md:mt-0 bg-white drop-shadow-md p-5 md:p-8 rounded-2xl"
           )) ]
        [ Stdlib.Html.span [] content ]

let itemHeading (content: Stdlib.Html.Node) : Stdlib.Html.Node =
    Stdlib.Html.div
        [ ("class", Stdlib.Option.Option.Some("my-3")) ]
        [ Stdlib.Html.h3
              [ ("class", Stdlib.Option.Option.Some("text-base md:text-xl font-bold")) ]
              [ content ]
        ]

let previewText (content: Stdlib.Html.Node) : Stdlib.Html.Node =
    Stdlib.Html.p
        [ ("class", Stdlib.Option.Option.Some("text-lg font-normal mx-4 my-4 line-clamp-3 previewText")) ]
        [ Stdlib.Html.span [] [ content ] ]

let bulletPoints (content: List<Stdlib.Html.Node>) : Stdlib.Html.Node =
    Stdlib.Html.ul [ ("class", Stdlib.Option.Option.Some("text-lg font-normal m-4")) ] content

let bulletPoint (content: Stdlib.Html.Node) : Stdlib.Html.Node =
    Stdlib.Html.li [ ("class", Stdlib.Option.Option.Some("flex flex-row mt-2")) ] [ listBulletSvg (); content ]

let listBulletSvg () : Stdlib.Html.Node =
    Stdlib.Html.p
        [ ("class", Stdlib.Option.Option.Some("text-purple text-2xl mr-3 leading-6 font-bold")) ]
        [ Stdlib.Html.stringNode "-" ]

let arrowSvg () : Stdlib.Html.Node =
    Stdlib.Html.stringNode
        """
      <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 25 25"
      class="w-5 h-5 ml-2 transition-transform group-hover:translate-x-1"
    >
      <path
        style="fill: #232326"
        d="m17.5 5.999-.707.707 5.293 5.293H1v1h21.086l-5.294 5.295.707.707L24 12.499l-6.5-6.5z"
        data-name="Right"
      />
    </svg>
    """

let tagLabel (content: String) : Stdlib.Html.Node =
    Stdlib.Html.div
        [ ("class", Stdlib.Option.Option.Some("mx-auto inline-block")) ]

        [ Stdlib.Html.div
              [ ("class",
                 Stdlib.Option.Option.Some(
                     "overflow-hidden group relative flex flex-row bg-[#E3D3FF] text-purple px-1.5 py-0.5 mx-1 rounded text-sm"
                 )) ]

              [ Stdlib.Html.span [] [ Stdlib.Html.stringNode content ]
                Stdlib.Html.div
                    [ ("class",
                       Stdlib.Option.Option.Some(
                           "absolute top-0 -inset-full h-full w-1/2 z-5 block transform -skew-x-12 bg-gradient-to-r from-transparent to-white opacity-40 group-hover:animate-shine"
                       )) ]
                    [] ] ]

let t2024 () : Stdlib.Html.Node = tagLabel "2024"

let t2025 () : Stdlib.Html.Node = tagLabel "2025"

let inlineCode (content: List<Stdlib.Html.Node>) : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "code"
        [ ("class",
           Stdlib.Option.Option.Some(
               "font-FiraCode text-xs flex-wrap md:text-sm inline-flex text-left items-center bg-code-background rounded py-1 px-2 text-blue"
           )) ]
        [ Stdlib.Html.span [] content ]

let darklangCode (content: String) : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "code"
        [ ("class",
           Stdlib.Option.Option.Some(
               "max-w-xs md:max-w-sm xl:max-w-lg 2xl:max-w-xl font-FiraCode text-sm !bg-code-background !text-gray-600 rounded language-fsharp"
           )) ]
        [ Stdlib.Html.span [] [ Stdlib.Html.stringNode content ] ]

let darklangCodeDarkBg (content: String) : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "code"
        [ ("class", Stdlib.Option.Option.Some("!bg-dark-gray !text-white fsharp")) ]
        [ Stdlib.Html.span [] [ Stdlib.Html.stringNode content ] ]

let bashCode (content: String) : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "code"
        [ ("class",
           Stdlib.Option.Option.Some(
               "max-w-xs md:max-w-sm xl:max-w-lg 2xl:max-w-xl font-FiraCode text-sm !bg-code-background !text-gray-600 rounded shell"
           )) ]
        [ Stdlib.Html.span [] [ Stdlib.Html.stringNode content ] ]

let cliCode (content: Stdlib.Html.Node) : Stdlib.Html.Node =
    Stdlib.Html.div
        [ ("class",
           Stdlib.Option.Option.Some(
               "font-FiraCode bg-cli-background text-white rounded-xl px-8 py-2 mx-3 my-2 text-sm 2xl:text-base"
           )) ]
        [ Stdlib.Html.div
              [ ("class", Stdlib.Option.Option.Some("inline-block my-2")) ]
              [ Stdlib.Html.button [ ("class", Stdlib.Option.Option.Some("rounded-full h-3 w-3 mx-1 bg-[#DD333F]")) ] []
                Stdlib.Html.button [ ("class", Stdlib.Option.Option.Some("rounded-full h-3 w-3 mx-1 bg-[#F5D76E]")) ] []
                Stdlib.Html.button [ ("class", Stdlib.Option.Option.Some("rounded-full h-3 w-3 mx-1 bg-[#5FDD68]")) ] [] ]

          Stdlib.Html.div [] [ content ] ]

let commentText (content: String) : Stdlib.Html.Node =
    Stdlib.Html.span
        [ ("class", Stdlib.Option.Option.Some("text-[#02A5F1] m-0 p-0")) ]
        [ Stdlib.Html.span [] [ Stdlib.Html.stringNode content ] ]

let highlightJsScripts () : Stdlib.Html.Node =
    Stdlib.Html.stringNode
        """
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/vs2015.min.css"/>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/languages/fsharp.min.js"></script>
        <script>
          hljs.highlightAll();
        </script>
      """

let toggleScript () : Stdlib.Html.Node =
    Stdlib.Html.stringNode
        """
      <script>
        // Menu button navigation bar
        const button = document.querySelector("#menu-button");
        const menu = document.querySelector("#menu");
        const arrow = document.getElementById("arrowIcon");
        const darkClassicBtn = document.querySelector("#dark-classic-btn");
        const darkClassicMenu = document.querySelector("#dark-classic-menu");

        const toggleHeading = document.querySelector("#toggle-heading-li");

        darkClassicBtn.addEventListener("click", () => {
          darkClassicMenu.classList.toggle("hidden");
          arrow.classList.toggle("rotate-180");
        });

        button.addEventListener("click", () => {
          menu.classList.toggle("hidden");
        });

        // Toggle items ellipsis content (see example)
        document.addEventListener('DOMContentLoaded', () => {
          const toggleItems = document.querySelectorAll('.toggleItem');

          toggleItems.forEach(item => {
            item.addEventListener('click', function() {
              const targetId = this.getAttribute('data-target-id');
              const targetElement = document.getElementById(targetId);
              const seeExampleElement = this.querySelector('.see-example'); 
              
              if (targetElement) {
                targetElement.classList.toggle('hidden');
              }

              if (seeExampleElement) {
                seeExampleElement.classList.toggle('hidden'); 
              }
              item.classList.toggle('justify-center');
              item.classList.toggle('h-64');
              item.classList.toggle('sm:h-72'); 
            });
          });
        });


        // Toggle items hidden content (read more)
        document.addEventListener('DOMContentLoaded', () => {
        const allHiddenToggleItems = document.querySelectorAll(".hiddenToggleItem");

        allHiddenToggleItems.forEach(item => {
          item.addEventListener("click", function() {
            const contentId = this.getAttribute('data-target');
            const content = document.getElementById(contentId);

            if (content) {
              content.classList.toggle('hidden');
              const buttonTextSpan = this.querySelector('.readMoreButton'); 
              if (buttonTextSpan) {
                const isContentHidden = content.classList.contains('hidden');
                buttonTextSpan.textContent = isContentHidden ? "Read More" : "Show Less";
              }
            }
          });
        });
      });



      </script>
    """

let head () : Stdlib.Html.Node =
    Stdlib.Html.head
        []
        [ Stdlib.Html.title [] [ Stdlib.Html.stringNode "Darklang" ]
          Stdlib.Html.htmlTagNode
              "link"
              [ ("href", Stdlib.Option.Option.Some("./style.css"))
                ("rel", Stdlib.Option.Option.Some("stylesheet")) ]
              []
          highlightJsScripts () ]

let navbar () : Stdlib.Html.Node =
  Stdlib.Html.stringNode
              """
    <div class="sticky bg-light-background w-full top-0 left-0 z-50">
      <div
        class="text-center bg-dark-gray text-white flex items-center justify-center"
      >
        <span>
          <svg
            class="h-4 w-4"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 6 3"
          >
            <path fill="#007A3D" d="M0 0h6v3H0z" />
            <path fill="#FFF" d="M0 0h6v2H0z" />
            <path d="M0 0h6v1H0z" />
            <path fill="#CE1126" d="M0 0l2 1.5L0 3z" />
          </svg>
        </span>
        <p class="p-2">
          #FreePalestine.
          <a target="_blank" href="https://blog.paulbiggar.com/i-cant-sleep/"
            >Read our founder's
            <span class="underline hover:text-blue">statement</span></a
          >
        </p>
      </div>

      <!--Navbar-->
      <nav>
        <div
          class="container flex flex-wrap items-center justify-between mx-auto p-4"
        >
          <a href="/" class="flex items-center">
            <img
              src="./img/wordmark-light-transparent@2x.png"
              class="h-12 mr-3"
              alt="Darklang logo"
            />
          </a>

          <div class="flex md:order-2 justify-center items-center">
            <button type="button" class="text-center mr-3 md:mr-0 md:pt-4">
              <div id="dark-classic-btn" class="md:inline-block relative">
                <div
                  class="font-semibold inline-flex items-center px-3 py-2 hover:text-purple"
                >
                  <span class="mr-1 text-xs md:text-base"
                    >Darklang classic</span
                  >
                  <svg
                    id="arrowIcon"
                    class="fill-current h-4 w-4 transform transition duration-200 ease-in-out"
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 20 20"
                  >
                    <path
                      d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"
                    />
                  </svg>
                </div>
                <div
                  id="dark-classic-menu"
                  class="absolute hidden w-full bg-light-background text-black rounded-lg border border-blue"
                >
                  <ul>
                    <li class="hover:bg-blue hover:text-white">
                      <a
                        class="py-2 px-4 block mx-2 border-b border-b-blue/25"
                        href="/classic"
                        >About</a
                      >
                    </li>
                    <li class="hover:bg-blue hover:text-white">
                      <a
                        class="py-2 px-4 block mx-2 border-b border-b-blue/25"
                        href="https://login.darklang.com"
                        >Log in</a
                      >
                    </li>
                    <li class="hover:bg-blue hover:text-white rounded-b-lg">
                      <a class="py-2 px-4 block" href="./classic/signup"
                        >Sign up</a
                      >
                    </li>
                  </ul>
                </div>
              </div>
            </button>

            <button
              id="menu-button"
              type="button"
              class="inline-flex items-center md:hidden"
              aria-expanded="false"
            >
              <svg
                class="w-6 h-6"
                aria-hidden="true"
                fill="currentColor"
                viewBox="0 0 20 20"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fill-rule="evenodd"
                  d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
                  clip-rule="evenodd"
                ></path>
              </svg>
            </button>
          </div>

          <div
            id="menu"
            class="rounded-b-lg bg-md:order-1 hidden md:flex bg-white/70 md:bg-transparent justify-between items-center w-full md:w-auto"
          >
            <template id="top-item">
              <!-- header top links -->
              <li class="hover:text-blue border-b md:border-none">
                <a
                  placeholder-href
                  target="_blank"
                  class="block py-2 pl-3 pr-4"
                >
                  <span content-top-item>REPLACEME</span>
                </a>
              </li>
            </template>

            <ul class="flex flex-col md:flex-row md:space-x-8 p-6 md:p-0 mt-4">
              <!--
              Disabled for now as it points to old docs
              <top-item href="https://docs.darklang.com">Documentation</top-item>
              -->
              <top-item href="https://blog.darklang.com">Blog</top-item>
              <top-item href="https://darklang.com/discord">Discord</top-item>
              <top-item href="https://github.com/darklang/dark"
                >GitHub</top-item
              >
              <top-item href="https://darklang.com/sponsor"
                >Sponsor us</top-item
              >
            </ul>
          </div>
        </div>
      </nav>
    </div>
    """ 

let heroSection () : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "section"
        [ ("class", Stdlib.Option.Option.Some("mx-12 md:mx-32 mt-20 md:mt-28 2xl:mt-40 font-Quicksand")) ]
        [ Stdlib.Html.div
              [ ("class", Stdlib.Option.Option.Some("flex flex-col justify-center items-center mx-auto text-center")) ]
              [ Stdlib.Html.htmlTagNode
                    "img"
                    [ ("src", Stdlib.Option.Option.Some("./img/wordmark-light-transparent@2x.png"))
                      ("class", Stdlib.Option.Option.Some("max-w-xs md:max-w-xl 2xl:max-w-3xl")) ]
                    [] ]

          Stdlib.Html.div
              [ ("class",
                 Stdlib.Option.Option.Some(
                     "mt-10 2xl:mt-20 mx-auto flex flex-col items-center justify-center xl:flex-row max-w-6xl 2xl:max-w-screen-xl"
                 )) ]
              [ Stdlib.Html.div
                    []
                    [ Stdlib.Html.h2
                          [ ("class", Stdlib.Option.Option.Some("text-3xl 2xl:text-4xl font-bold mb-4 text-dark-gray")) ]
                          [ Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                [ Stdlib.Html.stringNode "Just " ]
                            Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                [ Stdlib.Html.stringNode "code" ] ]

                      Stdlib.Html.p
                          [ ("class", Stdlib.Option.Option.Some("text-base 2xl:text-lg text-justify text-gray-500")) ]
                          [ Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-grey-500")) ]
                                [ Stdlib.Html.span
                                      [ ("class", Stdlib.Option.Option.Some("font-bold")) ]
                                      [ Stdlib.Html.stringNode "no cruft:" ]
                                  Stdlib.Html.stringNode
                                      " no build systems, no null, no exception handling, no ORMs, no OOP, no inheritence hierarchies, no async/await, no compilation, no dev environments, no dependency hell, no packaging, no git, no github " ]

                            Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                [ Stdlib.Html.span
                                      [ ("class", Stdlib.Option.Option.Some("font-bold")) ]
                                      [ Stdlib.Html.stringNode "no devops:" ]
                                  Stdlib.Html.stringNode
                                      " no yaml, no config files, no docker, no containers, no kubernetes, no ci/cd pipelines, no terraform, no orchestrating " ]

                            Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                [ Stdlib.Html.span
                                      [ ("class", Stdlib.Option.Option.Some("font-bold")) ]
                                      [ Stdlib.Html.stringNode "no infrastructure:" ]
                                  Stdlib.Html.stringNode
                                      " no sql, no nosql, no connection poolers, no sharding, no indexes, no servers, no serverless, no networking, no load balancers, no 200 cloud services, no kafka, no memcached, no unix, no OSes" ] ] ]


                Stdlib.Html.htmlTagNode
                    "form"
                    [ ("id", Stdlib.Option.Option.Some("form1"))
                      ("onsubmit", Stdlib.Option.Option.Some("addEmailToList(1); return false;"))
                      ("class", Stdlib.Option.Option.Some("font-bold md:flex md:flex-col justify-center m-10")) ]

                    [ Stdlib.Html.div
                          [ ("class", Stdlib.Option.Option.Some("md:flex md:flex-col justify-center")) ]
                          [ Stdlib.Html.p
                                [ ("class", Stdlib.Option.Option.Some("my-2 text-dark-gray/50")) ]
                                [ Stdlib.Html.stringNode "Send me project updates" ]
                            Stdlib.Html.div
                                [ ("class", Stdlib.Option.Option.Some("md:flex md:flex-row")) ]
                                [ Stdlib.Html.htmlTagNode
                                      "input"
                                      [ ("type", Stdlib.Option.Option.Some("email"))
                                        ("id", Stdlib.Option.Option.Some("email1"))
                                        ("name", Stdlib.Option.Option.Some("email"))
                                        ("placeholder", Stdlib.Option.Option.Some("Your email"))
                                        ("required", Stdlib.Option.Option.None)
                                        ("class",
                                         Stdlib.Option.Option.Some(
                                             "border border-gray-300 rounded-lg px-4 py-3 focus:ring-white w-full md:w-96"
                                         )) ]
                                      []

                                  Stdlib.Html.span
                                      [ ("class",
                                         Stdlib.Option.Option.Some(
                                             "hidden text-red-400 absolute -bottom-7 text-xs italic"
                                         ))
                                        ("id", Stdlib.Option.Option.Some("error1")) ]
                                      []

                                  Stdlib.Html.button
                                      [ ("type", Stdlib.Option.Option.Some("submit"))
                                        ("class",
                                         Stdlib.Option.Option.Some(
                                             "bg-blue hover:bg-purple text-white rounded px-5 py-3 mx-auto mt-2 w-full md:mt-0 md:w-max md:mx-2"
                                         )) ]
                                      [ Stdlib.Html.stringNode "Send" ] ] ] ] ] ]

let introSection () : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "section"
        [ ("class",
           Stdlib.Option.Option.Some(
               "container mx-auto p-8 text-center my-10 md:px-16 2xl:p-0 md:mt-44 2xl:mb-32 text-xl md:text-4xl font-Quicksand"
           )) ]
        [ Stdlib.Html.p
              []
              [ Stdlib.Html.stringNode
                    "Darklang puts everything in one box, so you can build CLIs and cloud apps with no bullshit, "
                Stdlib.Html.span
                    [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                    [ Stdlib.Html.stringNode "just " ]
                Stdlib.Html.span
                    [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                    [ Stdlib.Html.stringNode "code" ] ]

          Stdlib.Html.htmlTagNode "br" [] []

          Stdlib.Html.p
              [ ("class", Stdlib.Option.Option.Some("text-sm md:text-lg xl:text-xl")) ]
              [ Stdlib.Html.stringNode "Also it's a really enjoyable language to use!" ] ]


let darkClassicSection () : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "section"
        [ ("class", Stdlib.Option.Option.Some("container mx-auto mb-12 md:mb-40")) ]
        [ Stdlib.Html.div
              [ ("class",
                 Stdlib.Option.Option.Some(
                     "bg-[#19181D] rounded md:rounded-2xl flex flex-col md:flex-row md:items-center md:justify-between p-2 md:pr-7 md:pl-20 m-4"
                 )) ]
              [ Stdlib.Html.div
                    [ ("class",
                       Stdlib.Option.Option.Some(
                           "flex md:flex-col justify-between md:items-start md:justify-start m-2 md:m-0"
                       )) ]
                    [ Stdlib.Html.p
                          [ ("class",
                             Stdlib.Option.Option.Some("text-white text-base md:text-lg lg:text-3xl 2xl:text-4xl")) ]
                          [ Stdlib.Html.stringNode "Looking for Darklang-classic?" ]

                      Stdlib.Html.button
                          [ ("class",
                             Stdlib.Option.Option.Some(
                                 "bg-purple text-white text-xs md:text-lg rounded px-3 py-1 md:mt-6"
                             )) ]
                          [ Stdlib.Html.a
                                [ ("href", Stdlib.Option.Option.Some("/classic"))
                                  ("class", Stdlib.Option.Option.Some("hover:underline")) ]
                                [ Stdlib.Html.stringNode "Learn more" ] ] ]

                Stdlib.Html.div
                    [ ("class", Stdlib.Option.Option.Some("md:w-[700px] md:h-[230px] overflow-hidden")) ]
                    [ Stdlib.Html.htmlTagNode
                          "img"
                          [ ("src", Stdlib.Option.Option.Some("./img/dark-classic.png"))
                            ("class", Stdlib.Option.Option.Some("w-full")) ]
                          [] ] ] ]

let codeSection () : Stdlib.Html.Node =
    Stdlib.Html.htmlTagNode
        "section"
        [("class", Stdlib.Option.Option.Some("container mx-auto my-20")) ]
        [ Stdlib.Html.div
              []
              [ Stdlib.Html.div
                    [ ("class", Stdlib.Option.Option.Some("mb-8 text-center text-gray-500")) ]
                    [ Stdlib.Html.span
                          [ ("class", Stdlib.Option.Option.Some("md:text-lg 2xl:text-xl")) ]
                          [ Stdlib.Html.stringNode "In development - here’s how things will look shortly" ] ]

                Stdlib.Html.div
                    [ ("class", Stdlib.Option.Option.Some("lg:flex justify-center items-center mb-24")) ]
                    [ Stdlib.Html.div
                          []
                          [ cliCode (
                                Stdlib.Html.span
                                    []
                                    [ Stdlib.Html.htmlTagNode
                                          "pre"
                                          [ ("class", Stdlib.Option.Option.Some("whitespace-pre-line")) ]
                                          [ Stdlib.Html.div
                                                []
                                                [ Stdlib.Html.stringNode "$ "
                                                  Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                                      [ Stdlib.Html.stringNode "curl" ]
                                                  Stdlib.Html.stringNode " https://darklang.com/download "
                                                  Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                                      [ Stdlib.Html.stringNode "| bash\n\n" ] ]
                                            Stdlib.Html.stringNode "Darklang installed in "
                                            Stdlib.Html.span
                                                [ ("class", Stdlib.Option.Option.Some("text-gray-400")) ]
                                                [ Stdlib.Html.stringNode "~/.darklang/bin/darklang\n\n" ]
                                            Stdlib.Html.stringNode "Add to "
                                            Stdlib.Html.span
                                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                                [ Stdlib.Html.stringNode "PATH" ]
                                            Stdlib.Html.stringNode "via .bashrc"
                                            Stdlib.Html.span
                                                [ ("class", Stdlib.Option.Option.None) ]
                                                [ Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-gray-500")) ]
                                                      [ Stdlib.Html.stringNode " [y, n]"]
                                                  Stdlib.Html.stringNode "? y\n"
                                                  Stdlib.Html.span
                                                      [ ("class",
                                                         Stdlib.Option.Option.Some("text-lime-400 font-body mr-1")) ]
                                                      [ Stdlib.Html.stringNode "&#10004;" ]
                                                  Stdlib.Html.stringNode "Added to .bashrc.\n\n"
                                                  Stdlib.Html.stringNode "Next you can:\n\n"
                                                  commentText "# Try the tutorial\n\n"
                                                  Stdlib.Html.stringNode "darklang tutorial\n\n"
                                                  commentText "# Run some code from the package manager\n\n"
                                                  Stdlib.Html.stringNode " darklang @paul.fizzbuzz 3\n\n"
                                                  commentText "# Generate some code\n\n"
                                                  Stdlib.Html.stringNode "darklang prompt "
                                                  Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-gray-400")) ]
                                                      [ Stdlib.Html.stringNode
                                                            "\"Find ts scripts with more than 600 lines which use the commonjs format\"\n\n" ]
                                                  commentText "# See available command line options\n\n"
                                                  Stdlib.Html.stringNode "darklang help\n\n" ] ] ]
                            ) ]

                      Stdlib.Html.div
                          []
                          [ cliCode (
                                Stdlib.Html.span
                                    []
                                    [ Stdlib.Html.htmlTagNode
                                          "pre"
                                          [ ("class", Stdlib.Option.Option.Some("whitespace-pre-line")) ]
                                          [ Stdlib.Html.span
                                                []
                                                [ Stdlib.Html.stringNode "$ "
                                                  Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                                      [ Stdlib.Html.stringNode "darklang " ]
                                                  Stdlib.Html.stringNode "@paul.fizzbuzz 3\n"
                                                  Stdlib.Html.stringNode "1\n2\n3\nFizz\n\n"
                                                  ] ] ]
                            )

                            cliCode (
                                Stdlib.Html.span
                                    []
                                    [ Stdlib.Html.htmlTagNode
                                          "pre"
                                          [ ("class", Stdlib.Option.Option.Some("whitespace-pre-line")) ]
                                          [ Stdlib.Html.span
                                                []
                                                [ Stdlib.Html.stringNode "$ "
                                                  Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                                      [ Stdlib.Html.stringNode "darklang " ]
                                                  Stdlib.Html.stringNode "deploy @paul.fizzbuzz /fizzbuzz\n"
                                                  Stdlib.Html.stringNode "Deployed to "
                                                  Stdlib.Html.span
                                                      [ ("class",
                                                         Stdlib.Option.Option.Some("text-gray-500 hover:underline")) ]
                                                      [ Stdlib.Html.stringNode
                                                            "https://furry-squirrel-3562.darklang.io/fizzbuzz\n" ]
                                                  Stdlib.Html.stringNode " in "
                                                  Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-[#a1b56c]")) ]
                                                      [ Stdlib.Html.stringNode "0.135s\n\n" ] ] ] ]
                            )

                            cliCode (
                                Stdlib.Html.span
                                    []
                                    [ Stdlib.Html.htmlTagNode
                                          "pre"
                                          [ ("class", Stdlib.Option.Option.Some("whitespace-pre-line")) ]
                                          [ Stdlib.Html.span
                                                []
                                                [ Stdlib.Html.stringNode "$ "
                                                  Stdlib.Html.span
                                                      [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                                      [ Stdlib.Html.stringNode "curl " ]
                                                  Stdlib.Html.stringNode
                                                      "-sSO https://furry-squirrel-3562.darklang.io/fizzbuzz/3 "
                                                  Stdlib.Html.stringNode "1\n2\n3\nFizz\n\n" ] ] ]
                            ) ] ] ] 
                            
          Stdlib.Html.div
              [("class", Stdlib.Option.Option.Some("lg:flex justify-center items-center"))]
              [
                cliCode
                  (Stdlib.Html.htmlTagNode
                      "pre"
                      [("class", Stdlib.Option.Option.Some("whitespace-pre-line"))]
                      [
                        Stdlib.Html.span
                          []
                          [ Stdlib.Html.stringNode "$ "
                            Stdlib.Html.span
                              [("class", Stdlib.Option.Option.Some("text-purple"))]
                              [ Stdlib.Html.stringNode "darklang " ]
                            Stdlib.Html.stringNode "prompt \"Find ts scripts with more than 600 lines which use commonjs format\"\n\n" 
                            Stdlib.Html.stringNode "We need your AI credentials, which will be stored locally in "
                            Stdlib.Html.span
                              [("class", Stdlib.Option.Option.Some("text-gray-400 hover:underline"))]
                              [Stdlib.Html.stringNode "~/darklang/secrets/\n\n"]
                            
                            Stdlib.Html.span
                              [("class", Stdlib.Option.Option.Some("text-gray-400"))]
                              [Stdlib.Html.stringNode "[1] "]
                            
                            Stdlib.Html.stringNode "Login to use Darklang AI service\n"

                            Stdlib.Html.span
                              [("class", Stdlib.Option.Option.Some("text-gray-400"))]
                              [Stdlib.Html.stringNode "[2] "]
                            
                            Stdlib.Html.stringNode "Enter GitHub copilot credentials\n"
                          
                            Stdlib.Html.span
                              [("class", Stdlib.Option.Option.Some("text-gray-400"))]
                              [Stdlib.Html.stringNode "[3] "]
                            
                            Stdlib.Html.stringNode "Enter OpenAI (GPT 3.5/4) credentials\n"
                          
                            Stdlib.Html.span
                              [("class", Stdlib.Option.Option.Some("text-gray-400"))]
                              [Stdlib.Html.stringNode "[4] "]
                            
                            Stdlib.Html.stringNode "Use local model\n\n"

                            Stdlib.Html.span
                              []
                              [ Stdlib.Html.stringNode "Enter "
                                Stdlib.Html.span
                                  [("class", Stdlib.Option.Option.Some("text-gray-400"))]
                                  [Stdlib.Html.stringNode "[1-4]"]
                                Stdlib.Html.stringNode ": 1\n\n"
                              ]
                            
                            Stdlib.Html.span
                              []
                              [ Stdlib.Html.stringNode "Login or register "
                                Stdlib.Html.span
                                  [("class", Stdlib.Option.Option.Some("text-gray-500"))]
                                  [Stdlib.Html.stringNode "[L, r]"]
                                Stdlib.Html.stringNode "? L\n\n"
                              ]
                            
                            Stdlib.Html.span
                              []
                              [ Stdlib.Html.span
                                  [("class", Stdlib.Option.Option.Some("text-gray-400"))]
                                  [Stdlib.Html.stringNode "Username: "]
                                Stdlib.Html.stringNode "paul\n"
                              ]
                            
                            Stdlib.Html.span
                              []
                              [ Stdlib.Html.span
                                  [("class", Stdlib.Option.Option.Some("text-gray-400"))]
                                  [Stdlib.Html.stringNode "Password: "]
                                Stdlib.Html.stringNode "**************\n\n"
                              ]
                            
                            Stdlib.Html.span
                              []
                              [ Stdlib.Html.span
                                  [("class", Stdlib.Option.Option.Some("text-lime-400 font-body mr-1"))]
                                  [Stdlib.Html.stringNode "&#10004;"]
                                Stdlib.Html.stringNode "Logged in.\n\n"
                              ]
                            
                            Stdlib.Html.span
                              []
                              [ Stdlib.Html.stringNode "Saved script in "
                                Stdlib.Html.span
                                  [("class", Stdlib.Option.Option.Some("text-gray-400 hover:underline"))]
                                  [Stdlib.Html.stringNode "./find-large-ts-cjs.dark "]
                                Stdlib.Html.stringNode "in "
                                Stdlib.Html.span
                                  [("class", Stdlib.Option.Option.Some("text-[#a1b56c]"))]
                                  [Stdlib.Html.stringNode "43.8s\n\n"]
                              ]]])
                
                Stdlib.Html.div
                  [("class", Stdlib.Option.Option.Some("bg-dark-gray rounded-lg mx-3"))]
                  [
                    Stdlib.Html.div
                      [ ("class", Stdlib.Option.Option.Some("flex items-center py-4 px-5 border-b border-b-white/10"))]
                      [
                        Stdlib.Html.div
                          []
                          [
                            Stdlib.Html.htmlTagNode
                              "img"
                              [ ("src", Stdlib.Option.Option.Some("./img/logo-dark-transparent.png"))
                                ("alt", Stdlib.Option.Option.Some("dark-file-logo"))
                                ("class", Stdlib.Option.Option.Some("w-8 h-8")) ]
                              []
                          ]
                        
                        Stdlib.Html.div
                          []
                          [
                            Stdlib.Html.p
                              [("class", Stdlib.Option.Option.Some("text-gray-300"))]
                              [Stdlib.Html.stringNode "find-large-ts-cjs.dark"]
                          ]
                      ]

                    Stdlib.Html.div
                      [ ("class", Stdlib.Option.Option.Some("px-4 pb-45"))]
                      [
                        Stdlib.Html.htmlTagNode
                          "pre"
                          []
                          [ darklangCodeDarkBg
                              """
  let findLargeTypescriptCommonJSFiles (path : String) =
    Directory.traverse (fun path -> 
      if not (List.oneOf (File.entension path) [".ts", ".mjs", ".cjs"]) then 
        print $"Skipping - wrong file type: {path}" 
      else 
        let contents = File.readString path 
        let lines = String.splitNewlines contents
        if (List.length lines) <= 600 then 
          print $"Skipping - too short: {path}" 
        else 
          let isCommonjs = 
            lines |> List.any (fun line ->
              line |> Regex.matches "/const .* = require(.*)/" 
            ) 
          if isCommonjs then 
            print $"Found one: {path}" 
      )
      
  findLargeTypescriptCommonJSFiles "./"
                      """
                          ]
                      ]
                  ]
              ]
                ]


let functionalLanguageSection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
            Stdlib.Html.span [] [ gradientText "Functional "; Stdlib.Html.stringNode "Language" ])

          itemsWrapper
              [ 
                toggleItem
                    "simpleTypes"
                    [ itemHeading ( 
                        Stdlib.Html.span 
                            []
                            [ Stdlib.Html.stringNode "Simple types using "
                              Stdlib.Html.span
                                  [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                  [ Stdlib.Html.stringNode "Record" ]
                              Stdlib.Html.stringNode " and "
                              Stdlib.Html.span
                                  [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                  [ Stdlib.Html.stringNode "Enum"]
                             ])
                    
                      previewText (
                          Stdlib.Html.stringNode
                              "Dynamic languages are great, allowing great flexibility. But now
                            that they've matured and projects have gotten larger, static
                            typing has been layered on top of very dynamic languages, and the
                            intersection is not pleasant. Functional static languages like
                            Darklang have simple Record and Enum types that can model nearly
                            everything with much less complexity."
                      )

                      toggleBody
                          "simpleTypes"
                          bulletPoints(
                              [ bulletPoint( 
                                    Stdlib.Html.span
                                      []
                                      [
                                        Stdlib.Html.stringNode
                                          "Abstract Data Types made of Record and Enums can model nearly anything, like in Rust, Elm, OCaml and F#"

                                        Stdlib.Html.htmlTagNode
                                            "pre"
                                            [ ("class", Stdlib.Option.Option.Some("mt-4 p-0")) ]
                                            [ darklangCode
                                                  """
  // Record
  type Url = {
    scheme : HttpScheme
    domain : String
    port : UInt16
    path : String
    query : Option&lt;String&gt;
  }

  // Enum (aka Variant, Sum Type, or Abstract Data Types)
  type UrlError = 
    | InvalidScheme(String)
    | EmptyDomain
    | InvalidPort(Int64)
    | Unparseable(msg:String, context:String)

  // Aliases are just shorthands
  type UrlParseResult = Result&lt;Url, UrlError&gt;
  """ ]]);
                                bulletPoint(Stdlib.Html.stringNode "We believe Object Oriented programming is a terrible way to model programs, and inheritence is a terrible misfeature. Languages like OCaml, Elm, and F# have shown that nearly all problems can be modeled using ADTs.") 
                                
                                ])]


                toggleItem
                    "optionResult"
                    [ itemHeading (
                        Stdlib.Html.span 
                            []
                            [ Stdlib.Html.span 
                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                [ Stdlib.Html.stringNode "Option" ]
                              Stdlib.Html.stringNode " and "
                              Stdlib.Html.span 
                                [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                [ Stdlib.Html.stringNode "Result" ]
                              Stdlib.Html.stringNode " types instead of null and exceptions" ])
                      
                      previewText (
                          Stdlib.Html.span
                              []
                              [ Stdlib.Html.stringNode "I think it's widely accepted that"
                                inlineCode [ Stdlib.Html.stringNode "null" ]
                                Stdlib.Html.stringNode "is a mistake, and that an"
                                inlineCode [ Stdlib.Html.stringNode "Option" ]
                                Stdlib.Html.stringNode "type (aka)"
                                inlineCode [ Stdlib.Html.stringNode "Optional" ]
                                Stdlib.Html.stringNode ","
                                inlineCode [ Stdlib.Html.stringNode "Maybe" ]
                                Stdlib.Html.stringNode ", etc) makes it significantly easier to program." ]
                      )

                      toggleBody
                          "optionResult"
                          bulletPoints(
                              [ bulletPoint(
                                    Stdlib.Html.span
                                        []
                                        [ Stdlib.Html.stringNode
                                              "We further believe that Exceptions — which can in most
                                              languages be thrown at any point — makes it very frustrating
                                              to know that a function actually works. There are no
                                              exceptions in Darklang, and we use"

                                          inlineCode [ Stdlib.Html.stringNode "Result" ]

                                          Stdlib.Html.stringNode "types to manage error cases" ]
                                )

                                bulletPoint(
                                    Stdlib.Html.span
                                        []
                                        [ inlineCode [ Stdlib.Html.stringNode "?" ]
                                          Stdlib.Html.stringNode "and"
                                          inlineCode [ Stdlib.Html.stringNode "!" ]
                                          Stdlib.Html.stringNode "operators (similar to Rust,
                                            TypeScript, and Clojure) provide ways to ergonomically handle
                                            errors without being too annoying (see also Gradual Static
                                            Typing)"
                                        ])
                                

                                bulletPoint(
                                  Stdlib.Html.stringNode "We will admit we have some RuntimeErrors which cannot be
                                    caught, but we are working to remove them almost entirely from
                                    the language (see Gradual Static Typing for what we're
                                    keeping)")
                              ])
                      ] 

                simpleItem
                  [ itemHeading ( 
                      Stdlib.Html.span 
                          []
                          [ Stdlib.Html.span 
                              [("class", Stdlib.Option.Option.Some("text-purple"))]
                              [ Stdlib.Html.stringNode "Garbage " ]
                            Stdlib.Html.stringNode "Collected"]
                    )
                    indentedBody (
                        Stdlib.Html.stringNode
                            "It can be fun to satisfy the borrow checker, or manage allocations
                            individually, but it can also be fun to just get working programs
                            immediately. We believe that run-time garbage collection is one of
                            the greatest programming language features, and we're all in"
                    )                  
                  ] 

                simpleItem
                  [ itemHeading ( 
                        Stdlib.Html.span 
                            []
                            [ Stdlib.Html.span 
                                [("class", Stdlib.Option.Option.Some("text-purple"))]
                                [ Stdlib.Html.stringNode "Unicode " ]
                              Stdlib.Html.stringNode "First"])
                    indentedBody(
                      Stdlib.Html.span
                        []
                        [ Stdlib.Html.stringNode
                            "Languages created last millennium typically use Strings made of
                              bytes, or worse, UTF16 characters, or even worse, Unicode
                              Codepoints! Like Swift, we believe that"
                          
                          inlineCode [ Stdlib.Html.stringNode "Character" ]
                          Stdlib.Html.stringNode "s should represent screen readable characters, like 👨‍👩‍👦‍👦. All characters in Darklang represent"
                          Stdlib.Html.span [ ("class", Stdlib.Option.Option.Some("italic")) ] [ Stdlib.Html.stringNode "Extended Grapheme Clusters" ]
                          Stdlib.Html.stringNode ": one character that you see on screen. Naturally, working on Unicode Codepoints"
                          t2024 ()
                          Stdlib.Html.stringNode "and normal bytes is also well supported."
                        ])
                ] ]]

let runsInstantlySection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
            Stdlib.Html.span [] [ Stdlib.Html.stringNode "Runs "; gradientText "Instantly" ])

          itemsWrapper
            [
              toggleItem 
                "run-any"
                [ itemHeading ( 
                      Stdlib.Html.span
                        []
                        [
                          Stdlib.Html.span
                            []
                            [ Stdlib.Html.stringNode "Instantly run any " 
                              Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                [ Stdlib.Html.stringNode "package " ]
                              Stdlib.Html.stringNode "from the "
                              Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                [ Stdlib.Html.stringNode "CLI" ]
                            ]
                          inlineCode [ 
                            Stdlib.Html.span
                              [ ("class", Stdlib.Option.Option.Some("text-blue pr-2")) ]
                              [ Stdlib.Html.stringNode "darklang" ]
                            Stdlib.Html.span
                              [ ("class", Stdlib.Option.Option.Some("text-dark-gray pr-2")) ]
                              [ Stdlib.Html.stringNode "@username.functionName" ]
                            Stdlib.Html.span
                              [ ("class", Stdlib.Option.Option.Some("ext-blue pr-2")) ]
                              [ Stdlib.Html.stringNode "arg1" ]
                            Stdlib.Html.span
                              [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                              [ Stdlib.Html.stringNode "arg2" ]
                          ]
                        ])
                  
                  previewText (
                      Stdlib.Html.stringNode
                          "Darklang has a new model of sharing programs. Any function in the
                            package manager can be called directly from the command line (so
                            long as we can figure out how to coerce the command line arguments
                            correctly)" )

                  toggleBody
                    "run-any"
                    bulletPoints(
                      [
                        Stdlib.Html.htmlTagNode
                          "pre"
                          []
                          [ 
                            bashCode
                              """  $ darklang @paul.fizzbuzz 10
  1
  2
  Fizz
  4
  Buzz
  Fizz
  7
  8
  Fizz
  Buzz
                              """
                          ]
                        
                        bulletPoint (
                          Stdlib.Html.span
                            []
                            [
                              Stdlib.Html.stringNode "We designed this to allow you to share scripts with your team, or the whole world. We support private packages"
                              t2024 ()
                              Stdlib.Html.stringNode ", with individual, team, or role-based access controls. You can even have functions that run server-side"
                              t2025 ()
                              Stdlib.Html.stringNode "without allowing the user to see credentials, for example for providing customer support tools to your team."
                            ]
                        )

                        bulletPoint (
                          Stdlib.Html.span
                            []
                            [
                              Stdlib.Html.stringNode "Functions can also be run from the web, Slack, Discord, etc"
                              t2024 ()
                            ]
                        )

                        bulletPoint (
                          Stdlib.Html.span
                            []
                            [
                              Stdlib.Html.stringNode "We're building safety features, to ensure that functions
                                can't just steal all your IDs and wallets and whatever.
                                Darklang asks for permissions when you call a function, and a
                                static analysis is run to collect all permissions needed."
                              
                              Stdlib.Html.htmlTagNode
                                "pre"
                                [("class", Stdlib.Option.Option.Some("mt-4"))]
                                [
                                  bashCode
                                    """  $ darklang @hacker.stealThings "Hi there"
  > @hacker.stealThings requires the following permissions
  >   Makes Http requests to unknown domains
  >   Reads any file
  >   Executes any file
  > Continue? [N, y] y
  > These are unusual permissions. Are you sure [N, y] y
  Ha ha, you're own3d

  $ darklang @mycompany.internal.createMonthlyReport
  > @mycompany.internal.createMonthlyReport requires the following
  > permissions
  >   Makes Http GET requests to stripe.com/api/ETC
  >   Makes Http POST requests to drive.google.com
  > Continue? [N, y] y
  Report initiated and stored at https://drive.google.com/u/asj599b3/5288942sdfsdf3.pdf
  """

                                ]
                            ]
                        )
                      ]
                    )
                ]


              toggleItem
                "instantly-run"
                [ itemHeading ( 
                    Stdlib.Html.span
                      []
                      [ Stdlib.Html.stringNode "Instantly "
                        Stdlib.Html.span
                          [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                          [ Stdlib.Html.stringNode "run " ]
                        Stdlib.Html.stringNode "programs as you "
                        Stdlib.Html.span
                          [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                          [ Stdlib.Html.stringNode "write " ]
                        Stdlib.Html.stringNode "them"
                      ]
                    )
                
                  previewText (
                      Stdlib.Html.stringNode
                          "Darklang is designed for a really fast iterative loop")
                  
                  toggleBody
                    "instantly-run"
                    bulletPoints(
                      [
                        bulletPoint (
                          Stdlib.Html.span 
                            []
                            [
                              Stdlib.Html.stringNode "Single binary to install means no environments or containers to set up."
                              Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("line-through")) ]
                                [ Stdlib.Html.stringNode "Install it now!" ]
                              
                              tagLabel "Coming early 2024"
                            ]
                        )

                        bulletPoint (
                          Stdlib.Html.span 
                            []
                            [
                              Stdlib.Html.stringNode "Packages are streamed from the package manager automatically &ndash; no"
                              inlineCode [ Stdlib.Html.stringNode "npm install" ]
                              Stdlib.Html.stringNode "step"
                            ]
                        )

                        bulletPoint (
                          Stdlib.Html.stringNode 
                            "darklang is interpreted &mdash; no compilation step required, programs run immediately"
                        )

                        Stdlib.Html.ul 
                          [("class", Stdlib.Option.Option.Some("ml-4"))]
                          [
                            bulletPoint (
                              Stdlib.Html.span 
                                []
                                [ Stdlib.Html.stringNode 
                                    "We plan to add background compilation in the future, combined with pre-compiled packages in the package manager"
                                  t2025 ()  
                                ]
                            )
                          ]

                        bulletPoint (
                          Stdlib.Html.stringNode 
                            "Gradual Static Typing allows running programs with incorrect types so you don't need to fix all the types in your program while getting one path working"
                        )
                      
                        bulletPoint (
                          Stdlib.Html.stringNode 
                            "Generate darklang code automatically using LLMs and GitHub Copilot"
                        )

                      ])
                ]
            ]
        ]

let nextGenPMSection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
            Stdlib.Html.span [] [ gradientText "Next-gen "; Stdlib.Html.stringNode "package management"])

          indentedBody (
              Stdlib.Html.span
                  []
                  [ Stdlib.Html.stringNode
                      "Darklang has a rather unique package manager, where functions and
                      types are individually versioned and immutable, taking a lot of the
                      hassle out of package management."
                    
                    toggleBody 
                      "streaming-package-manager"
                      bulletPoints(
                        [
                          bulletPoint (
                            Stdlib.Html.stringNode 
                              "Only download the specific package items you use"
                          )

                          bulletPoint (
                            Stdlib.Html.stringNode 
                              "Only upgrade the specific package items you use"
                          )

                          bulletPoint (
                            Stdlib.Html.span 
                              []
                              [ t2024 ()
                                Stdlib.Html.stringNode 
                                  "Automated dependency upgrades, as we track deprecation status, and know what functions are pure and safe to update."
                              ]
                          )

                          bulletPoint (
                            Stdlib.Html.stringNode 
                              "Different packages can rely on different versions of other packages"
                          )

                          bulletPoint (
                            Stdlib.Html.stringNode 
                              "Use multiple versions of the same package item at once: allows testing new versions without having to change an entire package version, lowering risk."
                          )

                          bulletPoint (
                            Stdlib.Html.span 
                              []
                              [ t2024 ()
                                Stdlib.Html.stringNode 
                                  "Share pre-release functions trivially, without contributors needing to check out your git repo or set up anything"
                              ]
                          )

                          bulletPoint (
                            Stdlib.Html.span 
                              []
                              [ t2024 ()
                                Stdlib.Html.stringNode 
                                  "The package manager functions as a source repository"
                              ]
                          )

                          bulletPoint (
                            Stdlib.Html.stringNode 
                              "no need for uploads, releases or other synchronization. No git or GitHub required (but you can sync to GitHub if you prefer)."
                          )
                        ]
                      )

                    readMoreButton("streaming-package-manager")
                    
                    ] 
              )
        ]

let gradualStaticTypingSection () : Stdlib.Html.Node = 
  sectionWrapper 
    [
      sectionHeading( 
        Stdlib.Html.span [] [ gradientText "Gradual " ;Stdlib.Html.stringNode "Static Typing"])

      indentedBody (
        Stdlib.Html.span 
          []
          [
            Stdlib.Html.stringNode "Gradual Static Typing allows running incomplete programs so you don't need to ensure everything type checks when you're getting one path working"
            
            toggleBody
              "gst"
              bulletPoints(
                [
                  bulletPoint(
                    Stdlib.Html.stringNode "While prototyping, just run code until you hit a type error"
                  )

                  bulletPoint (
                    Stdlib.Html.span 
                      []
                      [ Stdlib.Html.stringNode 
                          "After prototyping, run the full type checker to gain confidence your whole program works"
                        t2024 ()
                      ]
                  )

                  bulletPoint (
                    Stdlib.Html.span 
                      []
                      [ Stdlib.Html.stringNode 
                          "Full type-checking hints in VSCode or in LSP editors"
                        t2024 ()
                      ]
                  )

                  bulletPoint (
                    Stdlib.Html.span 
                      []
                      [ 
                        inlineCode [Stdlib.Html.stringNode "!"]
                        Stdlib.Html.stringNode "and "
                        inlineCode [Stdlib.Html.stringNode "?"]
                        Stdlib.Html.stringNode "operators allow easy error handling while you prototype"
                      ]
                  )


                  bulletPoint (
                    Stdlib.Html.span 
                      []
                      [ 
                        Stdlib.Html.stringNode "Automatic refactoring converts "
                        inlineCode [Stdlib.Html.stringNode "!"]
                        Stdlib.Html.stringNode "into proper error handling"
                        t2024 ()
                      ]
                  )                
                ]
              )
            
            readMoreButton("gst")
          ]
      )

    ]

let asyncRuntimeSection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
             Stdlib.Html.span [] [ gradientText "Async "; Stdlib.Html.stringNode "runtime"])

          itemsWrapper
              [ simpleItem (
                    [ itemHeading ( 
                        Stdlib.Html.span
                            []
                            [ Stdlib.Html.stringNode "Fully" 
                              Stdlib.Html.span
                                  [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                  [ Stdlib.Html.stringNode " asynchronous " ]
                              Stdlib.Html.stringNode "runtime"
                            ])

                      indentedBody (
                          Stdlib.Html.stringNode
                              "Darklang has a fully asynchronous runtime, so making a Http call
                      or reading a file doesn't block the runtime."
                      ) ]
                )

                simpleItem (
                    [ itemHeading ( 
                        Stdlib.Html.span
                            []
                            [ Stdlib.Html.span
                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                [ Stdlib.Html.stringNode "No " ]
                              inlineCode [ Stdlib.Html.stringNode "async" ]
                              Stdlib.Html.stringNode "/"
                              inlineCode [ Stdlib.Html.stringNode "await" ]])
                      
                      indentedBody (
                          Stdlib.Html.stringNode
                              "Adding async and await keywords to every language was a 
                  mistake. It exposes the complexity of concurrency and 
                  multi-threading to languages which were originally designed for
                  simplicity."
                      ) ]
                )

                simpleItem (
                    [ itemHeading ( 
                        Stdlib.Html.span
                            []
                            [ Stdlib.Html.span 
                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                [ Stdlib.Html.stringNode "Concurrent " ]
                              Stdlib.Html.stringNode "and "
                              Stdlib.Html.span 
                                [ ("class", Stdlib.Option.Option.Some("text-blue")) ]
                                [ Stdlib.Html.stringNode "parallel " ]
                              Stdlib.Html.stringNode "execution via data-dependencies" ])
                      
                      indentedBody (
                          Stdlib.Html.stringNode
                              "When you make an async request, it first waits for any arguments
                  that are async, and starts when they're done. If another
                  function call needs to use the result, it will wait for it
                  before starting.
                  Since darklang values are immutable, there won't be any race  
                  conditions from this."
                      ) ]
                )

                simpleItem (
                    [ itemHeading ( 
                        Stdlib.Html.span
                            []
                            [ Stdlib.Html.span 
                                [ ("class", Stdlib.Option.Option.Some("text-purple")) ]
                                [ Stdlib.Html.stringNode "Powerful " ]
                              Stdlib.Html.stringNode "escape hatches" ])
                      indentedBody (
                          Stdlib.Html.stringNode
                              "We provide powerful escape hatches if you need async ordering that
                  doesn't match the data dependencies of your program."
                      ) ]
                ) ] ]

let instantCloudDeploymentSection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
            Stdlib.Html.span [] [ gradientText "Instant "; Stdlib.Html.stringNode "cloud deployment"])

          indentedBody (
              Stdlib.Html.span
                  []
                  [ tagLabel "Optional"
                    t2024 ()

                    Stdlib.Html.stringNode
                        "Darklang has a fully integrated cloud deployment system, so you can
                  deploy your code to the cloud with a single command. This includes
                  creating databases, API endpoints, and worker queues, with no
                  containers, no cold starts, no orchestration, or other devops/cloud
                  engineering required" ]
          )

          ]

let designedForGenAISection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
            Stdlib.Html.span [] [ Stdlib.Html.stringNode "Designed for "; gradientText "GenAI" ])

          bulletPoints (
              [ bulletPoint (Stdlib.Html.span [] [ Stdlib.Html.stringNode "Works with GitHub Copilot" ])

                bulletPoint (
                    Stdlib.Html.span
                        []
                        [ Stdlib.Html.stringNode
                              "We redesigned the dark language and tooling to enable
                GenAI-generated programs, including exposing language tools to GenAI
                tools, allowing running partial and incomplete programs safely, and
                ensuring access to significant context to GenAI tools" ]
                )

                bulletPoint (
                    Stdlib.Html.span
                        []
                        [ t2024 ()
                          Stdlib.Html.stringNode "Build short CLI programs from prompts"
                          inlineCode
                              [ Stdlib.Html.span
                                    [ ("class", Stdlib.Option.Option.Some("text-blue mr-2")) ]
                                    [ Stdlib.Html.stringNode "darklang" ]
                                Stdlib.Html.span
                                    [ ("class", Stdlib.Option.Option.Some("text-purple mr-2")) ]
                                    [ Stdlib.Html.stringNode "prompt" ]
                                Stdlib.Html.stringNode "find all js files which don't have a CSS file of the same name" ] ]
                )

                bulletPoint (
                    Stdlib.Html.span
                        []
                        [ Stdlib.Html.stringNode "Use any LLM: darklang's fine-tuned models"
                          t2024 ()
                          Stdlib.Html.stringNode
                              ", local OSS models, commerical models via API, or using GitHub Copilot" ]
                )

                bulletPoint (
                    Stdlib.Html.span
                        []
                        [ t2024 ()
                          Stdlib.Html.stringNode "Build vendor SDKs from prompts and OpenAPI docs" ]
                )

                bulletPoint (
                    Stdlib.Html.span
                        []
                        [ t2024 ()
                          Stdlib.Html.stringNode "Build complex programs with darklang AI agents" ]
                )

                ]
          ) ]

let worksWithYourEditorSection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
            Stdlib.Html.span [] [ Stdlib.Html.stringNode "Works with your "; gradientText "Editor" ])

          bulletPoints (
              [ bulletPoint (Stdlib.Html.span [] [ Stdlib.Html.stringNode "VSCode Extension" ])
                bulletPoint (Stdlib.Html.stringNode "LSP support for other editors")
                bulletPoint (Stdlib.Html.stringNode "Works with GitHub Copilot and other GenAI tools")
                bulletPoint (
                    Stdlib.Html.stringNode
                        "We mention this because Darklang classic required using our editor, and that's no longer the case."
                ) ]
          ) ]

let openSourceSection () : Stdlib.Html.Node =
    sectionWrapper
        [ sectionHeading (
            Stdlib.Html.span [] [ gradientText "Open "; Stdlib.Html.stringNode "Source" ])

          indentedBody (
              Stdlib.Html.stringNode
                  "We expect to fully open source Darklang, which is currently source
              available, early 2024"
          ) ]

let footer () : Stdlib.Html.Node =
    Stdlib.Html.stringNode 
      """
          <footer
      class="container flex flex-col md:flex-row flex-1 justify-center items-center md:justify-between 2xl:justify-center 2xl:container mx-auto my-20"
    >
      <div class="w-full md:w-1/4 flex flex-col justify-center items-center">
        <div>
          <a href="/">
            <img
              src="./img/wordmark-light-transparent@2x.png"
              class="h-14"
              alt="logo"
            />
          </a>
        </div>

        <div class="text-sm text-gray-600 ml-5">
          <p>Copyright &copy; 2024 Dark Inc.</p>
        </div>

        <div class="mt-6 mx-4 text-2xl">
          <a href="https://github.com/darklang/dark" target="_blank"
            ><i class="fab fa-github"></i
          ></a>
          <a href="https://twitter.com/darklang" target="_blank"
            ><i class="fab fa-twitter"></i
          ></a>
          <a href="https://darklang.com/discord" target="_blank"
            ><i class="fab fa-discord"></i
          ></a>
          <a href="https://youtube.com/c/darklang" target="_blank"
            ><i class="fab fa-youtube"></i
          ></a>
        </div>
      </div>

      <div
        class="grid grid-cols-2 gap-y-2 md:container md:flex md:flex-row md:justify-around mt-8"
      >
        <div>
          <h5 class="font-medium mb-2">Darklang Classic</h5>
          <ul class="text-gray-500">
            <li>
              <a href="https://login.darklang.com" target="_blank">Sign in</a>
            </li>
            <li>
              <a href="https://darklang.com/signup" target="_blank">Sign up</a>
            </li>
            <li>
              <a href="https://darklang.com/desktop-client" target="_blank">
                Desktop client
              </a>
            </li>
            <li>
              <a href="https://darklang.com/mailing-list" target="_blank">
                Mailing list
              </a>
            </li>
          </ul>
        </div>

        <div>
          <h5 class="font-medium mb-2">Learning Darklang Classic</h5>
          <ul class="text-gray-500">
            <li>
              <a
                href="https://www.youtube.com/watch?v=orRn2kTtRXQ"
                target="_blank"
              >
                Demo video
              </a>
            </li>
            <li>
              <a href="https://youtube.com/c/Darklang/videos" target="_blank">
                Tutorial video
              </a>
            </li>
            <li>
              <a href="https://docs.darklang.com/introduction" target="_blank">
                Documentation
              </a>
            </li>
            <li>
              <a
                href="https://docs.darklang.com/tutorials/first-dark-application"
                target="_blank"
              >
                Tutorial
              </a>
            </li>
            <li>
              <a
                href="https://docs.darklang.com/category/walk-throughs"
                target="_blank"
              >
                Walk-throughs
              </a>
            </li>
          </ul>
        </div>

        <div>
          <h5 class="font-medium mb-2">Development</h5>
          <ul class="text-gray-500">
            <li>
              <a href="https://blog.darklang.com" target="_blank">Blog</a>
            </li>
            <li>
              <a href="https://github.com/darklang/dark" target="_blank">
                Source
              </a>
            </li>
            <li>
              <a href="https://darklang.com/notion" target="_blank">Roadmap</a>
            </li>
            <li>
              <a href="https://github.com/darklang/dark/issues" target="_blank">
                Issues
              </a>
            </li>
            <li>
              <a href="https://docs.darklang.com/changelog" target="_blank">
                Changelog
              </a>
            </li>
          </ul>
        </div>

        <div>
          <h5 class="font-medium mb-2">Community</h5>
          <ul class="text-gray-500">
            <li>
              <a href="https://darklang.com/discord" target="_blank">Discord</a>
            </li>
            <li>
              <a href="https://darklang.com/code-of-conduct" target="_blank">
                Code of conduct
              </a>
            </li>
            <li>
              <a
                href="https://docs.darklang.com/contributing/getting-started"
                target="_blank"
              >
                Contributor docs
              </a>
            </li>
          </ul>
        </div>
      </div>
    </footer>
      """

let body () : Stdlib.Html.Node =
    Stdlib.Html.body
        [ ("class", Stdlib.Option.Option.Some("bg-light-background box-border m-0 p-0")) ]
        [ 
          navbar ()
          heroSection ()
          introSection ()
          darkClassicSection ()
          codeSection ()
          Stdlib.Html.htmlTagNode
              "section"
              [("class", Stdlib.Option.Option.Some("container mx-auto my-20")) ]
              [
                functionalLanguageSection ()
                runsInstantlySection ()
                nextGenPMSection ()
                gradualStaticTypingSection ()
                asyncRuntimeSection ()
                instantCloudDeploymentSection ()
                designedForGenAISection ()
                worksWithYourEditorSection ()
                openSourceSection ()  
              ]
          footer ()
          toggleScript ()
        ]

let doc () : String =
    ([ Stdlib.Html.html [] [ head (); body () ] ]) |> Stdlib.Html.document

let main () : Int64 =
    let path = "public/index.html"

    let content = (doc ()) |> Stdlib.String.toBytes

    match Builtin.fileWrite content path with
    | Ok _ -> 0L
    | Error err ->
        Builtin.printLine err
        1L

main ()
